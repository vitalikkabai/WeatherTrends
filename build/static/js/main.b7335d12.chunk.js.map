{"version":3,"sources":["FastProject/Login/Login.js","FastProject/fire/fire.js","FastProject/Graph/Graph.js","FastProject/Start/Start.js","FastProject/FastProject.js","FastProject/Redux/reducer.js","FastProject/Redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Login","firebase","initializeApp","apiKey","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","props","history","useHistory","useState","className","type","onClick","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","user","push","catch","error","code","message","email","credential","FacebookAuthProvider","Graph","loginsData","to","signOut","Start","first","cancelSnapshot","FastProject","setLoginsData","useEffect","onAuthStateChanged","authUser","firestore","collection","onSnapshot","snapshot","data","forEach","doc","id","logins","providerId","providerData","update","FieldValue","arrayUnion","Date","getTime","exact","path","component","render","initialStore","reducer","store","action","console","log","facebookTime","googleTime","logCounter","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7335d12.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport firebase from 'firebase/app';\nimport fire from '../fire/fire';\n\nconst Login = (props) => {\n  const history = useHistory();\n\n  const [facebookTime, setFacebookTime] = useState(null);\n  const [googleTime, setGoogleTime] = useState(null);\n  const [logCounter, setLogCounter] = useState(null);\n\n  const getGoogleAcc = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then((result) => {\n      const { user } = result;\n      if (user) {\n        history.push('/graph');\n      }\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const { email } = error;\n      // The firebase.auth.AuthCredential type that was used.\n      const { credential } = error;\n      // ...\n    });\n  };\n\n  const getFacebookAcc = () => {\n    const provider = new firebase.auth.FacebookAuthProvider();\n    firebase.auth().signInWithPopup(provider).then((result) => {\n      const { user } = result;\n      if (user) {\n        history.push('/graph');\n      }\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const { email } = error;\n      // The firebase.auth.AuthCredential type that was used.\n      const { credential } = error;\n      // ...\n    });\n  };\n\n  return (\n    <div className=\"loginPage\">\n      <div className=\"loginArea\">\n        <h1>Login</h1>\n        <div className=\"buttonArea\">\n          <button type=\"button\" onClick={getGoogleAcc}>GOOGLE</button>\n          <button type=\"button\" onClick={getFacebookAcc}>FACEBOOK</button>\n        </div>\n      </div>\n    </div >\n  );\n};\n\nexport default Login;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyA3THnvWxkpr2h5TqGb7mpFUZTr_E77LBs',\n  authDomain: 'fastrewordssecondtest.firebaseapp.com',\n  projectId: 'fastrewordssecondtest',\n  databaseURL: 'https://fastrewordssecondtest-default-rtdb.firebaseio.com/',\n  storageBucket: 'fastrewordssecondtest.appspot.com',\n  messagingSenderId: '246817603757',\n  appId: '1:246817603757:web:da2e037d66869f59578624',\n};\n\nconst fire = firebase.initializeApp(firebaseConfig);\n\nexport default fire;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from 'firebase/app';\nimport PropTypes from 'prop-types';\n\nconst Graph = ({ loginsData }) => {\n  const signOut = () => {\n    firebase.auth().signOut();\n  };\n\n  return (\n    <div className=\"graphPage\">\n      <header>\n        <Link to=\"/start\">\n          <button type=\"button\" className=\"startedButton\">\n            GET STARTED\n          </button>\n        </Link>\n\n        <button type=\"button\" className=\"logOutButton\" onClick={signOut}>Log out</button>\n      </header>\n      <section className=\"graphSector\">\n        <h1>Logs info</h1>\n        <h2>See below the time and logs info</h2>\n        <div className=\"graph\" />\n      </section>\n      <footer>\n        Hi!\n      </footer>\n    </div>\n  );\n};\n\nGraph.propTypes = {\n  loginsData: PropTypes.object.isRequired,\n};\n\nexport default Graph;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Start = () => (\r\n  <div className=\"startPage\">\r\n    <header>\r\n      <Link to=\"/graph\">\r\n        <button type=\"button\" className=\"backButton\">\r\n          <div className=\"arrow\" />\r\n          <p>BACK</p>\r\n        </button>\r\n      </Link>\r\n      <button type=\"button\" className=\"logOutButton\">Log out</button>\r\n    </header>\r\n    <div className=\"startPictures\" />\r\n  </div>\r\n);\r\nexport default Start;\r\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport firebase from 'firebase/app';\nimport Login from './Login/Login';\nimport Graph from './Graph/Graph';\nimport Start from './Start/Start';\n\nlet first = true;\nlet cancelSnapshot = null;\n\nconst FastProject = () => {\n  const history = useHistory();\n  const [loginsData, setLoginsData] = useState({\n    'facebook.com': [],\n    'google.com': [],\n  });\n\n  useEffect(\n    () => firebase.auth().onAuthStateChanged((authUser) => {\n      if (authUser) {\n        history.push('/graph');\n        cancelSnapshot = firebase.firestore().collection('logins').onSnapshot((snapshot) => {\n          const data = {\n            'facebook.com': [],\n            'google.com': [],\n          };\n          snapshot.forEach((doc) => {\n            data[doc.id] = doc.data().logins;\n          });\n\n          setLoginsData(data);\n        });\n      } else {\n        history.push('/');\n        if (cancelSnapshot) {\n          cancelSnapshot();\n          cancelSnapshot = null;\n        }\n      }\n      if (first) {\n        first = false;\n      } else if (authUser) {\n        const { providerData } = authUser;\n        const { providerId } = providerData[0];\n        const ref = firebase.firestore().collection('logins').doc(providerId);\n        ref.update({\n          logins: firebase.firestore.FieldValue.arrayUnion(new Date().getTime()),\n        });\n      }\n    }),\n    [history],\n  );\n\n  return (\n    <div className=\"fastProjectPage\">\n      <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route\n          exact\n          path=\"/graph\"\n          render={() => (\n            <Graph loginsData={loginsData} />\n          )}\n        />\n        <Route exact path=\"/start\" component={Start} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default FastProject;\n","const initialStore = {};\n\nconst reducer = (store = initialStore, action) => {\n  console.log(action);\n  switch (action.type) {\n    case 'ADD_FACEBOOK_TIME': {\n      return {\n        ...store,\n        facebookTime: action.facebookTime,\n      };\n    }\n    case 'ADD_GOOGLE_TIME': {\n      return {\n        ...store,\n        googleTime: action.googleTime,\n      };\n    }\n    case 'ADD_LOG_COUNTER': {\n      return {\n        ...store,\n        logCounter: action.logCounter,\n      };\n    }\n    default: {\n      return store;\n    }\n  }\n};\n\nexport default reducer;\n","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport FastProject from './FastProject/FastProject';\nimport store from './FastProject/Redux/store';\n\nconst App = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <FastProject />\n    </BrowserRouter>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}