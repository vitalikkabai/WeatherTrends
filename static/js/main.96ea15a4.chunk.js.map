{"version":3,"sources":["WeatherTrends/Chart/Chart.js","WeatherTrends/WeatherTrends.js","App.js","serviceWorker.js","index.js"],"names":["Chart","arrData","formatData","itemCondition","ifCondition","elem","reduce","acc","cur","data","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","spanGaps","WeatherTrends","useState","isLoading","setIsLoading","setArrData","location","setLocation","parseData","useCallback","splittedArr","split","newArray","forEach","i","slice","push","replace","trim","map","item","parseFloat","filter","Number","isNaN","useEffect","fetch","method","then","response","text","onChange","event","target","value","changeLocation","selected","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96ea15a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Chart = ({ arrData }) => {\r\n  const formatData = (itemCondition, ifCondition, elem) => arrData.reduce((acc, cur) => (\r\n    (cur[itemCondition] === ifCondition) ? [...acc, cur[elem]] : acc\r\n  ), []);\r\n\r\n  return (\r\n    <div>\r\n      <Line\r\n        data={{\r\n          type: 'line',\r\n          labels: formatData(1, 2, 0),\r\n          datasets: [{\r\n            label: 'Mean maximum temperature',\r\n            data: formatData(1, 2, 2),\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: 'Mean minimum temperature',\r\n            data: formatData(1, 2, 3),\r\n            backgroundColor: [\r\n              'rgba(54, 162, 235, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(54, 162, 235, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: 'Days of air frost',\r\n            data: formatData(1, 2, 4),\r\n            backgroundColor: [\r\n              'rgba(75, 192, 192, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(75, 192, 192, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: 'Total rainfall',\r\n            data: formatData(1, 2, 5),\r\n            backgroundColor: [\r\n              'rgba(153, 102, 255, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(153, 102, 255, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          },\r\n          {\r\n            label: 'Total sunshine duration ',\r\n            data: formatData(1, 2, 6),\r\n            backgroundColor: [\r\n              'rgba(255, 159, 64, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n          }],\r\n          options: {\r\n            spanGaps: true,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nChart.propTypes = {\r\n  arrData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport Chart from './Chart/Chart';\r\n\r\nconst REQUEST_URL = 'https://thingproxy.freeboard.io/fetch/https://www.metoffice.gov.uk/pub/data/weather/uk/climate/stationdata/';\r\n\r\nconst WeatherTrends = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [arrData, setArrData] = useState(null);\r\n  const [location, setLocation] = useState('bradforddata');\r\n\r\n  const parseData = useCallback((data) => {\r\n    const splittedArr = data.split(/\\r\\n|\\n/);\r\n    const newArray = [];\r\n\r\n    splittedArr.forEach((i) => {\r\n      const firstSevenValue = +(i.slice(0, 7));\r\n      if (firstSevenValue) {\r\n        newArray\r\n          .push((i\r\n            .replace(/ +/g, ' ')\r\n            .trim()\r\n            .split(' '))\r\n            .map(item => (item === '---' ? null : parseFloat(item)))\r\n            .filter(item => !Number.isNaN(item)));\r\n      }\r\n    });\r\n\r\n    return newArray;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (location) {\r\n      fetch(`${REQUEST_URL + location}.txt`, {\r\n        method: 'GET',\r\n      })\r\n        .then(response => response.text())\r\n        .then((data) => {\r\n          setArrData(parseData(data));\r\n          setIsLoading(false);\r\n          setLocation(null);\r\n        });\r\n    }\r\n  }, [arrData, location, parseData]);\r\n\r\n  const changeLocation = event => setLocation(event.target.value);\r\n\r\n  return (\r\n    < div >\r\n      <select onChange={event => changeLocation(event)}>\r\n        <option value=\"aberporthdata\">Aberporth</option>\r\n        <option value=\"armaghdata\">Armagh</option>\r\n        <option value=\"ballypatrickdata\">Ballypatrick Forest</option>\r\n        <option selected value=\"bradforddata\" >Bradford</option>\r\n        <option value=\"braemardata\">Braemar</option>\r\n        <option value=\"cambornedata\">Camborne</option>\r\n        <option value=\"cambridgedata\">Cambridge NIAB</option>\r\n        <option value=\"cardiffdata\">Cardiff Bute Park</option>\r\n        <option value=\"chivenordata\">Chivenor</option>\r\n        <option value=\"cwmystwythdata\">Cwmystwyth</option>\r\n        <option value=\"dunstaffnagedata\">Dunstaffnage</option>\r\n        <option value=\"durhamdata\">Durham</option>\r\n        <option value=\"eastbournedata\">Eastbourne</option>\r\n        <option value=\"eskdalemuirdata\">Eskdalemuir</option>\r\n        <option value=\"heathrowdata\">Heathrow</option>\r\n        <option value=\"hurndata\">Hurn</option>\r\n        <option value=\"lerwickdata\">Lerwick</option>\r\n        <option value=\"leucharsdata\">Leuchars</option>\r\n        <option value=\"lowestoftdata\">Lowestoft</option>\r\n        <option value=\"manstondata\">Manston</option>\r\n        <option value=\"nairndata\">Nairn</option>\r\n        <option value=\"newtonriggdata\">Newton Rigg</option>\r\n        <option value=\"oxforddata\">Oxford</option>\r\n        <option value=\"paisleydata\">Paisley</option>\r\n        <option value=\"ringwaydata\">Ringway</option>\r\n        <option value=\"rossonwyedata\">Ross-on-Wye</option>\r\n        <option value=\"shawburydata\">Shawbury</option>\r\n        <option value=\"sheffielddata\">Sheffield</option>\r\n        <option value=\"southamptondata\">Southampton</option>\r\n        <option value=\"stornowaydata\">Stornoway Airport</option>\r\n        <option value=\"suttonboningtondata\">Sutton Bonington</option>\r\n        <option value=\"tireedata\">Tiree</option>\r\n        <option value=\"valleydata\">Valley</option>\r\n        <option value=\"waddingtondata\">Waddington</option>\r\n        <option value=\"whitbydata\">Whitby</option>\r\n        <option value=\"wickairportdata\">Wick Airport</option>\r\n        <option value=\"yeoviltondata\">Yeovilton</option>\r\n      </select>\r\n      {\r\n        !isLoading ? (\r\n          <div>\r\n            <Chart arrData={arrData} />\r\n          </div >\r\n        ) : (\r\n            <div>\r\n              Loading...\r\n            </div>\r\n          )\r\n      }\r\n    </div >\r\n  );\r\n};\r\nexport default WeatherTrends;\r\n","import React from 'react';\nimport './App.css';\nimport WeatherTrends from './WeatherTrends/WeatherTrends';\n\nconst App = () => (\n  <WeatherTrends />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}